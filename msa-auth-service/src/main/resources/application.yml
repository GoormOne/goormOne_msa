spring:
  application:
    name: msa-auth-service

  profiles:
    active: local
  datasource:
    url: jdbc:postgresql://db-goorm1.chqyoqs8q3x4.ap-northeast-2.rds.amazonaws.com/postgres
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: Goorm1!!
  jpa:
    hibernate:
      ddl-auto: none           # ?? ? update/validate ?
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  cloud:
    aws:
      credentials:
        accessKey: AKIAXETF2IMIEZGTIAVC
        secretKey: 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
      s3:
        bucket: groom-team-1-image-bucket
      region:
        static: ap-northeast-2
      stack:
        auto: false

  security:
    oauth2:
      client:
        registration:
          cognito:
            client-id: 2ig0efqufk2ct3svjjevvp1709
            client-secret: 158aeliiffvc12motmg6rf17vndfmdrkmnnbvcn4cmqpvtd47gj1
            scope:
              - email
              - openid
              - phone
            # Spring Security by default uses a redirect-uri in the format: {baseUrl}/login/oauth2/code/{registrationId}
            # For example: http://localhost:8080/login/oauth2/code/cognito
            # See more: https://docs.spring.io/spring-security/reference/servlet/oauth2/login/core.html#oauth2login-sample-redirect-uri
            redirect-uri: https://d84l1y8p4kdic.cloudfront.net
        provider:
          cognito:
            issuerUri: https://cognito-idp.ap-northeast-2.amazonaws.com/ap-northeast-2_UwU3TlTZt
            user-name-attribute: username

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized
---
spring:
  config:
    activate:
      on-profile: local

server:
  port: 8089

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

logging:
  level:
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.gateway.server.mvc: DEBUG
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://postgres.cpug0kggoegu.ap-northeast-2.rds.amazonaws.com/postgres
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: Goorm1!!
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

server:
  port: 8080

eureka:
  client:
    enabled: false
