name: CI/CD for User Service

on:
  push:
    branches: [ "release/1.0.0" ]
    paths:
      - 'msa-user-service/**'

env:
  AWS_REGION: ap-northeast-2
  SERVICE_DIR: msa-user-service
  ECR_REPOSITORY: user-service
  CONTAINER_NAME: msa-user-service

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.build-image.outputs.image_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::490913547024:role/gitactionToECR
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set short git commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

#      - name: Build, tag, and push Docker image
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#        run: |
#          chmod +x ./gradlew && ./gradlew :${{ env.SERVICE_DIR }}:build --no-daemon
#
#            # Build with SHA tag
#            docker buildx build --platform linux/amd64 \
#              -t "${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" \
#              -f ./${{ env.SERVICE_DIR }}/Dockerfile . \
#              --push
#
#            # Tag also as 'dev'
#            docker tag "${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" \
#                       "${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:dev"
#            docker push "${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:dev"
#
#            # GitHub Action output (sha image uri)
#            echo "image_sha=${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          chmod +x ./gradlew && ./gradlew :${{ env.SERVICE_DIR }}:build --no-daemon
          docker buildx build --platform linux/amd64 \
            -t "${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" \
            -f ./${{ env.SERVICE_DIR }}/Dockerfile . \
            --push
          echo "image_sha=${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

#  setup-eks:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    steps:
#      - name: Configure AWS credentials for EKS
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: arn:aws:iam::490913547024:role/gitactionToEKS
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Update kubeconfig
#        run: |
#            aws eks update-kubeconfig \
#              --name Groom-EKS-Cluster \
#              --region ${{ env.AWS_REGION }} \
#              --role-arn arn:aws:iam::4909dd13547024:role/gitactionToEKS
#
#      - name: Verify Kubernetes access
#        run: |
#          kubectl cluster-info
#          kubectl get nodes
#
#  deploy-rollout:
#    runs-on: ubuntu-latest
#    needs: setup-eks
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Argo Rollouts plugin
#        run: |
#          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
#          chmod +x ./kubectl-argo-rollouts-linux-amd64
#          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
#
#      - name: Deploy to EKS using Argo Rollouts
#        env:
#          IMAGE_SHA: ${{ needs.build-and-push.outputs.image_sha }}
#        run: |
#          echo "Updating rollout image to: $IMAGE_SHA"
#          kubectl argo rollouts set image user-service user-service=$IMAGE_SHA -n default
#
#          echo "Waiting for rollout to start..."
#          kubectl argo rollouts get rollout user-service -n default
#
#          echo "Rollout status:"
#          kubectl argo rollouts get rollout user-service -n default --watch=false
