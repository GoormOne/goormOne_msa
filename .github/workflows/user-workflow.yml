name: CI/CD for User Service

on:
  push:
    branches: [ "release/1.0.0" ]
    paths:
      - 'msa-user-service/**'

env:
  AWS_REGION: ap-northeast-2
  SERVICE_DIR: msa-user-service
  ECR_REPOSITORY: user-service
  CONTAINER_NAME: msa-user-service

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::490913547024:role/gitactionToECR
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set short git commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          chmod +x ./gradlew && ./gradlew :${{ env.SERVICE_DIR }}:build --no-daemon
          docker buildx build --platform linux/amd64 \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
            -f ./${{ env.SERVICE_DIR }}/Dockerfile . \
            --push
          echo "image_sha=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install kubectl and Argo Rollouts plugin
        run: |
          # Install kubectl if not present
          if ! command -v kubectl &> /dev/null; then
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          
          # Install Argo Rollouts plugin
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Setup EKS access
        run: |
          echo "=== AWS Identity Check ==="
          aws sts get-caller-identity
          
          echo "=== Update kubeconfig (method 1) ==="
          aws eks update-kubeconfig --name Groom-EKS-Cluster --region ${{ env.AWS_REGION }}
          
          echo "=== Alternative: Update kubeconfig with explicit role ==="
          aws eks update-kubeconfig --name Groom-EKS-Cluster --region ${{ env.AWS_REGION }} --role-arn arn:aws:iam::490913547024:role/gitactionToECR
          
          echo "=== Get fresh token ==="
          aws eks get-token --cluster-name Groom-EKS-Cluster --region ${{ env.AWS_REGION }}
          
          echo "=== Test basic kubectl access ==="
          kubectl version --short
          
          echo "=== Verify existing aws-auth configmap ==="
          kubectl get configmap aws-auth -n kube-system

      - name: Test Kubernetes access
        run: |
          echo "Testing Kubernetes connection..."
          kubectl cluster-info
          kubectl get nodes
          kubectl get rollouts -n default

      - name: Update Rollout image and start canary deployment
        env:
          IMAGE_SHA: ${{ steps.build-image.outputs.image_sha }}
        run: |
          echo "Updating rollout image to: $IMAGE_SHA"
          kubectl argo rollouts set image user-service user-service=$IMAGE_SHA -n default
          
          echo "Waiting for rollout to start..."
          kubectl argo rollouts get rollout user-service -n default
          
          echo "Rollout status:"
          kubectl argo rollouts get rollout user-service -n default --watch=false

      - name: Wait for manual approval
        run: |
          echo "=== 카나리 배포 첫 번째 단계 완료 ==="
          echo "배포를 계속 진행하려면: kubectl argo rollouts promote user-service -n default"
          echo "롤백하려면: kubectl argo rollouts abort user-service -n default"
