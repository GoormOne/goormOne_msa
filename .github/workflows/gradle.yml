
name: CI/CD for MSA

on:
  push:
    branches: [ "release/1.0.0" ]

env:
  AWS_REGION: ap-northeast-2
jobs:


  determine-changes:
    runs-on: ubuntu-latest
    outputs:

      services: ${{ steps.filter.outputs.changes }}

    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            msa-store-service:
             - 'msa-store-service/**'
            msa-order-service:
             - 'msa-order-service/**'


  build-and-deploy:
    needs: determine-changes
    if: needs.determine-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        service: ${{ fromJson(needs.determine-changes.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- AWS ECR 로그인 및 공통 설정 ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::490913547024:role/gitactionToECR
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Docker 이미지 빌드 및 푸시 ---
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service }}
          # latest 대신 고유한 Git 커밋 해시를 태그로 사용
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew && ./gradlew :${{ matrix.service }}:build --no-daemon
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./${{ matrix.service }}/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # 다음 단계에서 사용할 수 있도록 이미지 주소를 출력으로 저장
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # -------------------- ECS 자동 배포 --------------------
      # 1. 기존 작업 정의 파일을 기반으로 새 작업 정의 생성
      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # 프로젝트에 미리 준비해 둔 task-definition.json 파일 경로
          task-definition: ./${{ matrix.service }}/task-definition.json
          # 작업 정의 안에서 이미지를 교체할 컨테이너의 이름
          container-name: ${{ matrix.service }}
          # 위에서 빌드한 최신 이미지 주소
          image: ${{ steps.build-image.outputs.image }}

      # 2. 생성된 새 작업 정의로 ECS 서비스 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service }}-td
          cluster: DevCluster # 실제 ECS 클러스터 이름
          wait-for-service-stability: true # 배포가 안정될 때까지 기다림

