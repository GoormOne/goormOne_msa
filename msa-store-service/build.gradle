plugins {
	id "org.springframework.boot"
	id "io.spring.dependency-management"
	id "java"
}

dependencies {
	implementation project(':msa-common')

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'


	implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1")
	implementation "io.awspring.cloud:spring-cloud-aws-starter"
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'
	implementation "io.awspring.cloud:spring-cloud-aws-starter-secrets-manager"
	implementation 'io.awspring.cloud:spring-cloud-aws-s3'
	implementation 'org.springframework.boot:spring-boot-starter-validation'				// ✅ Dto 검증
	implementation 'org.springframework.boot:spring-boot-starter-actuator'					// ✅ health check
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'	// ✅ Eureka client
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'					// ✅ JPA
	implementation 'io.awspring.cloud:spring-cloud-aws-s3:3.0.2'							// ✅ MSA cloud
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'				// ✅ Mongo DB
	implementation 'org.springframework.boot:spring-boot-starter-batch'   					// ✅ Spring Batch
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'								// ✅ QueryDSL

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	// Redisson 클라이언트를 사용하기 위한 의존성 (이것도 그대로 유지)
	implementation 'org.redisson:redisson-spring-boot-starter:3.50.0'

	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
	testImplementation 'org.mockito:mockito-core:5.12.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// queryDSL의 Q class가 생기는 위치를 통일
def querydslSrcDir = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}

compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated'
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
	delete file(querydslSrcDir)
}