spring:
  application:
   name: msa-store-service
  profiles:
    active: local

  data:
    redis:
      host: localhost
#      host: 192.168.3.208
      port: 6379
      clientName: KSY

    cache:
      type: redis
      redisson:
        file: classpath:redisson-config.yaml

    mongodb:
      uri: mongodb+srv://ksm3255:!4786buch@team1mongodb.oh0o0np.mongodb.net/?retryWrites=true&w=majority&appName=Team1Mongodb
      #      port: 27017
      database: ai_service_db

  datasource:
    url: jdbc:postgresql://db-goorm1.chqyoqs8q3x4.ap-northeast-2.rds.amazonaws.com/postgres #우리 디비로 바꾸기
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: Goorm1!!
    hikari:
      maximum-pool-size: 4
      minimum-idle: 2
      idle-timeout: 300000        # 5m
      max-lifetime: 1500000       # 25m
      keepalive-time: 1200000     # 20m
      connection-timeout: 30000
      validation-timeout: 3000
      auto-commit: false

  batch:
    jdbc:
      initialize-schema: never   # 메타테이블 생성 : 최초 한번만
    job:
      enabled: false              # 앱 실행시 job 자동 실행

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized

---
spring:
  config:
    activate:
      on-profile: local
  cloud:
    aws:
      credentials:
        accessKey: AKIAXETF2IMIKHLD6BEJ
        secretKey: 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
      s3:
        bucket: groom-team-1-image-bucket
      region:
        static: ap-northeast-2
      stack:
        auto: false

  kafka:
    bootstrap-servers: localhost:29092                                              # Kafka 접속 정보 저장
    consumer:
      group-id: test-group                                                          # Consumer Group
      auto-offset-reset: earliest                                                   # Consumer가 저장된 offset을 찾지 못했을 때
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer    # 문자열 형태로 메시지 key값 역직렬화
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # 문자열 형태로 메시지 value값 역직렬화
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

app:
  chat:
    requestStream: chat:requests
    responseStream: chat:response
    responseKeyPrefix: "chat:resp:"   # chat:resp:{request_id}
    responseTtlSeconds: 300

server:
  port: 8081

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

logging:
  level:
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.gateway.server.mvc: DEBUG
    org.springframework.kafka: INFO
    org.apache.kafka: INFO
    com.example.msaorderservice: DEBUG

---
spring:
  config:
    activate:
      on-profile: dev
    import: ["aws-secretsmanager:dev"]

  datasource:
    url: jdbc:postgresql://${db_host}:5432/postgres
    driver-class-name: org.postgresql.Driver
    username: ${db_username}
    password: ${db_password}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  cloud:
    loadbalancer:
      enabled: false
    aws:
      credentials:
        accessKey: AKIAXETF2IMIEZGTIAVC
        secretKey: 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
      s3:
        bucket: ${s3_bucket_name}
      region:
        static: ap-northeast-2
      stack:
        auto: false

server:
  port: 8080

eureka:
  client:
    enabled: false

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n"
  level:
    root: INFO
    org.springframework.web.servlet.DispatcherServlet: TRACE
